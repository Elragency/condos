import*as e from"fs";import{dirname as m}from"path";var P=async(o,{fulfilled:g,failed:n,accomplished:f,changed:u,passed:r,read:c,wrote:a})=>{for(const[i,h]of o.results)try{if(o.ongoing.inputPath=h,o.ongoing.outputPath=i,o.ongoing.fileSizeBefore=(await e.promises.stat(o.ongoing.inputPath)).size,c&&a){o.ongoing.buffer=await c(o.ongoing);const s=await a(o.ongoing);if(!s)continue;if(o.ongoing.buffer=s,r&&await r(o.ongoing)){try{await e.promises.access(m(o.ongoing.outputPath),e.constants.W_OK)}catch{await e.promises.mkdir(m(o.ongoing.outputPath),{recursive:!0})}if(await e.promises.writeFile(o.ongoing.outputPath,o.ongoing.buffer,"utf-8"),o.ongoing.fileSizeAfter=(await e.promises.stat(o.ongoing.outputPath)).size,o.debug>0&&(o.files++,u&&(o=await u(o))),o.debug>1&&typeof f=="function"){const t=await f(o.ongoing);t&&t.length>0&&console.log(t)}}}}catch{if(o.results.delete(i),typeof n=="function"){const t=await n(o.ongoing);t&&t.length>0&&console.log(t)}}if(o.debug>0&&o.results.size>0&&typeof g=="function"){const i=await g(o);i&&i.length>0&&console.log(i)}return o};export{P as default};
